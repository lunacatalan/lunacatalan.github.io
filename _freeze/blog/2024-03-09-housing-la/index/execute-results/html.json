{
  "hash": "5ecfaf33a1960eed73048973651a3fb7",
  "result": {
    "markdown": "---\ntitle: \"Who, What, Where: Exploring Affordable Housing in Los Angeles, CA\"\nauthor: \"Luna Herschenfeld-Catal√°n she/her\"\ndate:  2024-03-09\ntitle-block-banner: true\ncategories: [Geospatial, Quarto, R, MEDS] # self-defined categories\ncitation: \n  url: https://lunacatalan.github.io/blog/2024-03-09-housing-la/index.html \nformat:\n  html:\n    code-fold: false\ndraft: false\nimage: images/infographic.png\ntoc: TRUE\n---\n\n\n## Research Question\n\nThe housing crisis has affected cities across the country. Different approaches to providing resources have had varying degrees of success. Many cities simply need a greater access to affordable housing. Equitable approaches that avoid displacement require understanding what the problems are, **where** they are occurring, **who** is being affected, and **what** is being done currently.\n\n#### Takeaways\n\n-   The neighborhoods of Maywood, Commerce, Bell Gardens, and Cudahy have high rent burden, high eligibility for affordable housing, and have not had any projects built there.\n\n-   A density ridge plot shows the demographic distribution of the census tracts in LA compared to the tracts with affordable housing built in them. There is a greater proportion of Black and Hispanic people in tracts with affordable housing built in them compared to the average across LA.\n\n-   A bar plot showing the amount of funding from the LAHD that has gone into building affordable housing. Order in 2015 led to an exponential increase in funding for projects, and the order in 2022 helped expedite permits.\n\n### Data\n\n#### Sources\n\nHOUSEHOLD CENSUS DATA\n\nAll census data was accessed from census.gov, using an API key and the `tidycensus` package.\n\n-   Household Income for 2022: Estimated using PUMS (Public Use Microdata Sample) from the American Community Survey. I used the 1-year ACS PUMS file which represents about 1%of the total U.S. population (approximately 1.3 million housing unit records and about 3 million person records). I used the variable `HINCP` which is household income over the last 12 months, in conjunction with the household size. The file was too big to render every time, so it was exported to csv as `pums_2022.csv`.\n\n-   Eligibility calculations: Used information from the [Housing Authority of the City of Los Angeles (HACLA)](https://www.hacla.org/en/about-public-housing/public-housing-applicants) to calculate affordable housing eligibility based on household income and size.\n\n-   Income brackets: Used the equations provided by the [U.S Department of Housing and Urban development](https://www.huduser.gov/portal/datasets/il/il2020/2020summary.odn) on income limits.\n\nCENSUS TRACT DATA\n\n-   TIGER Shapefiles for census tracts in 2022 for California were accessed from [census.gov](https://www.census.gov/cgi-bin/geo/shapefiles/index.php), and used to make more specific observations compared to the PUMA geometries which are areas of every 100,000 people.\n\nNEIGHBORHOODS DATA\n\n-   Census tracts and neighborhoods were connected using data from [USC's Neighborhood Data For Social Change](https://usc.data.socrata.com/Los-Angeles/Census-Tract-Locations-LA-/atat-mmad/about_data) which is a lab that aimes to use \"data to help local civic actors track measurable change, improve local policies and programs, and ultimately advocate for a better quality of life within their communities\". The data is saved as `Census_Tract_Locations__LA__20240206.csv` which connected the information from PUMA to the census tract geometries.\n\nAFFORDABLE HOUSING DATA\n\n-   Affordable housing project data was accessed from [data.lacity.org](https://data.lacity.org/Housing-and-Real-Estate/LAHD-Affordable-Housing-Projects-List-2003-to-Pres/mymu-zi3s/about_data) and saved as `LAHD_Affordable_Housing_Projects_List__2003_to_Present__20240119.csv`. This data set was last updated February 6, 2024, and is owned by the Department of Los Angeles housing. Each entry is a single project that has been started since 2003 to present.\n\n\n\n\n\n# Where?\n\nTo approach the element of *where* affordable housing would be most useful, and the elements that would go into that, a chloropleth map is very effective. This allows us to compare across geographic regions, such as census tracts, and then elaborate in greater detail on any interesting patterns that appeared. I\n\n## Wrangle and Clean Data\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npums_housing_income <- get_pums(state = \"06\",\n                              survey = \"acs1\",\n                              variables = c(\"PUMA\",\n                                            \"NP\", #\tNumber of persons in this household\n                                            \"HINCP\", # Household income (past 12 months, use ADJINC to adjust HINCP to constant dollars\n                                            \"GRPIP\", #Gross rent as a percentage of household income past 12 months\")\n                                            \"FINCP\" # Family income (past 12 months, use ADJINC to adjust FINCP to constant dollars)\n                                            ),\n                              year = 2022)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# geometry of the puma 2022 shapefiles\npuma <- read_sf(here(\"blog\", \"2024-03-09-housing-la\", \"data\", \"tl_2022_06_puma20\", \"tl_2022_06_puma20.shp\"))\n\npuma_la <- puma %>% \n  filter(grepl(037, PUMACE20)) %>% \n  rename(PUMA = PUMACE20)\n\npums_housing_22 <- read_csv(here::here(\"blog\", \"2024-03-09-housing-la\", \"data\", \"pums_2022.csv\"))\n\n# remove the duplicates from 2022 data\npuma_house_codes <- pums_housing_22 %>% \n  select(SERIALNO, PUMA) %>% \n  distinct()\n\npuma_22 <- pums_housing_22 %>% \n  inner_join(puma_la, by = \"PUMA\") %>% \n  select(SERIALNO, WGTP, NP, HINCP, FINCP, GRPIP) %>% \n  mutate(NP = as.numeric(NP),\n         HINCP = as.numeric(HINCP),\n         FINCP = as.numeric(FINCP),\n         GRPIP = as.numeric(GRPIP)) %>% \n  group_by(SERIALNO) %>% \n  summarize_all(mean, na.rm = TRUE) %>% \n  left_join(puma_house_codes)\n\nla_tract_vacant <- get_acs(\n  state = \"CA\",\n  county = \"Los Angeles\",\n  geography = \"tract\",\n  variables = \"B25004_001\",\n  geometry = TRUE,\n  year = 2022\n)\n\nla_tract <- la_tract_vacant %>%\n  mutate(NAME = gsub(\"; Los Angeles County; California\", # elements that you want to remove\n                                  \"\", # replace with blank\n                                  NAME)) %>%\n  mutate(NAME = gsub(\"Census Tract \", # elements that you want to remove\n                                  \"\", # replace with blank\n                                  NAME)) %>% \n  filter(GEOID != \"06037599100\") %>% # islands\n  filter(GEOID != \"06037599000\") %>% # islands\n  filter(GEOID != \"06037980003\") %>%\n  filter(GEOID != \"06037980004\") %>%\n  filter(!(NAME >= 9000 & NAME <= 9800))\n\n\n# -------------------------------------------------\n## Looking at the places where affordable housing projects have been built since 2003\n# --------------------------------------------------\n\n# read in affordable housing projects in LA from 2003 to present\nah_raw <- read_csv(here(\"blog\", \"2024-03-09-housing-la\", \"data\", \"LAHD_Affordable_Housing_Projects_List__2003_to_Present__20240119.csv\")) %>% \n  clean_names()\n\n# clean affordable housing data \nah_clean <- ah_raw %>% \n  mutate(fun_date = as.Date(date_funded, tryFormats = c(\"%m/%d/%Y\"))) %>% # make date_funded as date\n  mutate(year = lubridate::year(fun_date)) %>% # make into year column \n  select(name, year, fun_date, construction_type, site_community, total_units = project_total_units, \n         housing_type, lahd_funded, in_service_date, gps_coords_on_map) %>% \n  mutate(gps_coords_on_map = gsub(\"[POINT()]\", # elements that you want to remove\n                                  \"\", # replace with blank\n                                  gps_coords_on_map)) %>% # remove these elements from gps column \n  separate_wider_delim(gps_coords_on_map, \n                       delim = \" \", names = c(\"empty\", \"coords\"), # separate space from before the coordinates\n                       too_many = \"merge\") %>% \n  separate_wider_delim(coords, delim = \" \", names = c(\"Longitude\", \"Latitude\"), # split lat and long coords\n                       too_many = \"merge\") %>% \n  select(-empty) %>% \n  st_as_sf(coords = c(\"Longitude\", \"Latitude\"), # make into geometry object\n                 crs = st_crs(la_tract)) %>% \n  st_join(la_tract) %>% \n  mutate(site_community = str_to_title(site_community))\n```\n:::\n\n\n## Assigning income categories to households\n\n### Create income breaks for households above 8 (from 9-20)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# creating dataframe with income brackets and eligibility\npeople <- c(1, 2, 3, 4, 5, 6, 7, 8)\nvery_low <- c(39450, 45050, 50700, 56300, 60850, 65350, 69850, 74350)\nextreme_low <- c(23700, 27050, 30450, 33800, 36550, 39250, 41950, 44650)\nlow <- c(63100, 72100, 81100, 90100, 97350, 104550, 111750, 118950)\n\nincome_breaks <- data.frame(people, extreme_low, very_low, low)\n\n# setting the equations for creating more brackets\n# very low income \nsize <- seq(9, 20, 1)\nvery_low <- data.frame()\nrow_n <- data.frame()\n\nfor (i in seq_along(size)) {\n  income <- 1.32 + (i*.08)\n  limit <- income*56300\n  row <- size[i]\n  row_n <- rbind(row_n, row)\n  very_low = rbind(very_low, limit)\n}\n\nvery_low <- cbind(row_n, very_low) %>% \n  rename(people = X9,\n         very_low = X78820)\n\nextreme <- data.frame()\nfor (i in seq_along(size)) {\n  # https://www.huduser.gov/portal/datasets/il/il2020/2020ILCalc3080.odn#calculator\n  income <- 44120 + (i*4480)\n  extreme <- rbind(extreme, income)\n}\n\nlow <- data.frame()\nfor (i in seq_along(size)) {\n  income <- 1.32 + (i*.08)\n  limit <- income*90100\n  low <- rbind(low, limit)\n}\n\ncols_9_20 <- cbind(extreme, very_low) %>% \n  rename(extreme_low = X48600) %>% \n  cbind(low) %>% \n  rename(low = X126140)\n\nincome_breaks <- rbind(income_breaks, cols_9_20)\n```\n:::\n\n\n### Creating For Loop\n\nI wanted to iterate over the entire data frame, and based on the household size, assign a threshold value to that row. Then, based on the income, the household would be categorized as either extreme, very low, low, or not eligible.\n\n#### Applying for loop to the whole data set\n\n\n::: {.cell}\n\n```{.r .cell-code}\npuma_22$status <- rep(NA, nrow(puma_22))\n\nfor (person in 1:nrow(puma_22)) {\n  \n  individual <- puma_22$NP[person]\n  \n  income <- income_breaks %>% \n    filter(people == individual)\n  \n  # Define thresholds for labels\n  extreme_threshold <- income[[2]]\n  very_low_threshold <- income[[3]]\n  low_threshold <- income[[4]]\n  \n  # # Assign labels based on thresholds\n  puma_22$status[person] <- ifelse(puma_22[[\"HINCP\"]][person] <= extreme_threshold, \n                              \"extreme\",\n                              ifelse(puma_22[[\"HINCP\"]][person] > extreme_threshold & puma_22[[\"HINCP\"]][person] <= very_low_threshold, \n                                     \"very low\",\n                                     ifelse(puma_22[[\"HINCP\"]][person] > very_low_threshold & puma_22[[\"HINCP\"]][person] <= low_threshold, \n                                            \"low\",\n                                            ifelse(puma_22[[\"HINCP\"]][person] > low_threshold, \"not eligible\", \"non\"))))\n}\n```\n:::\n\n\n## Creating Map Plots\n\nThe PUMS data is aggregated to locations of at least 100,000 people, but the geographies aren't at a very useful spatial resolution. To address this problem, I wanted to combine the information for PUMS and neighborhoods, which are more relevant to the average person. To achieve this, I used the data set that included census tracts and neighborhoods, and joined them. This allowed me to make a map of the census tracts with the PUMS household data.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npuma_geo <- puma_la %>% \n  select(PUMA, geometry)\n\n\npuma_plot <- puma_22 %>% \n  group_by(PUMA) %>% \n  count(status) %>% \n  pivot_wider(names_from = \"status\", values_from = \"n\") %>% \n  ungroup() %>% \n  clean_names() %>% \n  select(puma, extreme, very_low, low, not_eligible) %>% \n  mutate(PUMA = puma, \n         total_households = rowSums(.[2:5]),\n         total_eligible = rowSums(.[2:4]),\n         percent_eligible = (total_eligible/total_households) * 100 ) %>% \n  left_join(puma_geo) %>% \n  st_as_sf()\n\n# crop puma plot with the la_tract to remove the top part of LA\npuma_plot_crop <- st_crop(puma_plot, la_tract)\n\n\n# has 2196 points\ntract_neighborhood <- read_csv(here(\"blog\", \"2024-03-09-housing-la\", \"data\", \"Census_Tract_Locations__LA__20240206.csv\")) %>% \n  mutate(census_tract = gsub(\", Los Angeles County, California\", # elements that you want to remove\n                                  \"\", # replace with blank\n                                  Tract)) %>% \n  select(-Tract, census_tract, Neighborhood, Latitude, Longitude) %>% \n  st_as_sf(coords = c(\"Longitude\", \"Latitude\"), # make into geometry object\n                 crs = st_crs(puma_plot)) %>% \n  st_crop(puma_plot_crop) # neighborhoods only in the census tracts of interest\n\n# make a df with the puma information and census tract geometry \npuma_tract <- puma_plot_crop %>% # has 67 observations\n  st_join(tract_neighborhood,\n                join = st_intersects) %>% # has the same number of points as the neighborhood\n  clean_names() %>% \n  select(neighborhood, census_tract, location, puma, geometry) %>% \n  mutate(census_tract = gsub(\"Census Tract \", # elements that you want to remove\n                                  \"\", # replace with blank\n                                  census_tract))\n\n# rename the tract column\nla_tract <- la_tract %>% \n  rename(census_tract = NAME) %>% \n  select(census_tract, geometry)\n\npuma_tract <- puma_tract %>% \n  st_drop_geometry() %>% \n  left_join(la_tract)\n\npuma_eligibility <- puma_plot %>% \n  st_drop_geometry() %>% \n  select(!PUMA)\n\n# make map of the census tracts with the puma household data\ntract_eligibility <- puma_tract %>% \n  left_join(puma_eligibility, by = \"puma\") %>% \n  filter(!st_is_empty(geometry)) %>% \n  st_as_sf()\n```\n:::\n\n\n### Set up: Rent Burden Plot\n\nThis plot looked at the `GRPIP` column, which is the gross rent percentage spent on rent. To qualify as rent burdened, households must spend \\>30% of their household income on rent. I classified the households as either burdened or not burdened, and then found the percentage of each tract that was rent burdened. I made sure to `uncount()` the wgt column which is the number of households that each row represents. This allowed me to gain a better estimate of the households that were rent burdened.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrent_burden <- puma_22 %>% \n  group_by(PUMA) %>% \n  rename(percent_rent = GRPIP) %>%  \n  select(WGTP, percent_rent, PUMA) %>% \n  mutate(status = ifelse(percent_rent >= 30, \"burden\", \"not_burden\")) %>% \n  uncount(WGTP) %>% # apply the weights\n  count(status) %>% \n  pivot_wider(names_from = \"status\", values_from = \"n\") %>% \n  ungroup() %>% \n  rename(puma = PUMA) %>% \n  mutate(total = burden+not_burden,\n         percent_burden = (burden/total)*100)\n\nrent_burdened <- puma_tract %>% \n  left_join(rent_burden) %>% \n  filter(!st_is_empty(geometry)) %>% \n  st_as_sf()\n```\n:::\n\n\n### Creating a custom theme\n\nI created my own theme for my plots I decided that I would have a dark background because it made the brown/yellow colors that reminded me of buildings pop. I chose the font families based on suggested font pairings that were aesthetically pleasing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# import google fonts \nfont_add_google(name = \"Josefin Sans\",\n                family = \"josefin\") # name we provide ggplot\n\nfont_add_google(name = \"Sen\",\n                family = \"sen\") # name we provide ggplot\n\nfont_add_google(name = \"Tenor Sans\",\n                family = \"tenorSans\") # name we provide ggplot\n\n# Pairs\nfont_add_google(name = \"Playfair Display\",\n                family = \"playfairDisplay\") # name we provide ggplot\n\nfont_add_google(name = \"Alice\",\n                family = \"alice\") # name we provide ggplot\n\n# enable show text here that configures font across platforms\nshowtext_auto()\n\nmy_theme_dark <- theme(\n  plot.title = element_text(size = 20, face = \"bold\", family = \"playfairDisplay\", hjust = 0.5), # Font size set to 16 and bold.\n  plot.caption.position = \"plot\",\n  plot.caption = element_text(size = 10, hjust = 0, family = \"alice\", color = \"white\"),\n  axis.title = element_text(size = 14), # Font size set to 12.\n  axis.text = element_blank(), # no axis text.\n  axis.ticks = element_blank(),\n  legend.title = element_text(size = 15, face = \"bold\", family = \"alice\", color = \"white\"), # Font size of the title of the legend set to 12 and bold.\n  legend.text = element_text(size = 12, color = \"white\"), # font size of the text in the legend\n  plot.background = element_rect(fill = \"black\"),\n  panel.background = element_rect(fill = \"black\"),\n  legend.background = element_rect(fill = \"black\"),\n  panel.grid.major = element_blank(),\n  plot.margin = margin(12, 6, 12, 18),\n  panel.grid.minor = element_blank(), # invisible auxiliary grids\n  strip.background = element_rect(fill = \"black\", color = \"#ff975d\"), # strip background\n  strip.text = element_text(size = 12, face = \"bold\", family = \"alice\", color = \"white\"), # strip texts\n  legend.position = \"top\", # position of the legend\n  legend.box.background = element_rect(color = \"black\"), # background of the plot\n  legend.key.size = unit(5, \"cm\") # size of the legends key\n)\n\nmy_brew_palette15 <- RColorBrewer::brewer.pal(n = 20, name = 'YlGnBu')\nmy_brew_palette10 <- RColorBrewer::brewer.pal(n = 10, name = 'RdBu')\nmy_brew_palette5 <- RColorBrewer::brewer.pal(n = 10, name = 'Reds')\nmy_brew_palette1 <- RColorBrewer::brewer.pal(n = 9, name = 'YlOrBr')\ncolors <- sequential_hcl(9, palette = \"Red-Yellow\")\n```\n:::\n\n\n### Plotting: Eligibility for Affordable Housing and Rent Burden in Census Tracts\n\nI used this plot to explore the distribution of eligibility across Los Angeles to see if there were any interesting patterns. I then realized that in terms of importance, looking at rent burden is more important since that reflects more about an area and the way people interact with it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# eligibility of housing in LA\ntract_eligibility_percent <- ggplot(tract_eligibility) +\n  geom_sf(aes(fill = percent_eligible)) +\n  scale_fill_stepsn(colors = my_brew_palette5,\n                    labels = scales::label_percent(scale = 1),\n                    breaks = scales::breaks_width(width = 7)) +\n  labs(title = \"Exploring Affordable Housing Needs in Los Angeles County, CA\",\n       fill = \"Percent Eligible\",\n       caption = \"Households Eligible for Affordable Housing by PUMA in Los Angeles, CA\") + \n  guides(fill = guide_colorbar(barheight = unit(1, units = \"mm\"),  \n                                 barwidth = unit(100, units = \"mm\"),\n                                 direction = \"horizontal\",\n                                 ticks.colour = \"grey20\",\n                                 title.position = \"top\",\n                                 label.position = \"bottom\",\n                                 title.hjust = 0.5)) +\n  my_theme_dark\n```\n:::\n\n\n### Comparing Neighborhoods and Census Tracts of Interest\n\nI was interested in looking at census tracts that had different factors, including high vs low rent burden, high vs low eligibility, and presence or absence of affordable housing. These dynamics often interact, and understanding the people that are affected in these different situations could be important for understanding ways to approach different issues.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# joining the eligibility and rent data together by census tract\nburden_eligible <- rent_burdened %>% \n  st_drop_geometry() %>% \n  left_join(tract_eligibility, by = \"census_tract\") %>% \n  st_as_sf()\n\ntop_burden <- burden_eligible %>% \n  slice_max(order_by = percent_burden,\n            n = 200)\n\n# high burden, no affordable housing\nburden_non <- top_burden %>% \n  slice_min(order_by = percent_burden, \n            n = 25) \n\n# high burden, affordable housing\nburden_ah <- burden_eligible %>% \n  slice_max(order_by = percent_burden,\n            n = 30)\n\n# low burden, with affordable housing - and also have high percentage eligible for affordable housing\nlowburden_ah <- burden_eligible %>% \n  slice_max(order_by = percent_eligible,\n            n = 450) %>% \n  slice_min(order_by = percent_eligible,\n            n = 25)\n\n# low burden, no affordable housing - low percentage of households that qualify for affordable housing\nlowburden_non <- burden_eligible %>% \n  slice_min(order_by = percent_eligible,\n            n = 100) %>% \n  slice_min(order_by = percent_eligible,\n            n = 20)\n\n# neighborhoods right next to undeserved geometry represented by `burden_non`\ninterest <- burden_eligible %>% \n  slice_min(order_by = percent_burden,\n            n = 600) %>% \n  slice_max(order_by = percent_burden,\n            n = 15) \n\n# high burden, no affordable housing\nburden_non_plot <- burden_non %>% \n  st_union() %>% \n  ggplot() +\n  geom_sf() +\n  labs(title = \"Neighborhoods with High Rent Burden, \\nNo Affordable Housing\") +\n  my_theme_dark\n\n# high burden, affordable housing\nburden_ah_plot <- burden_ah %>% \n  st_union() %>% \n  ggplot() +\n  geom_sf() +\n  labs(title = \"Neighborhoods with High Rent Burden, \\nWith Affordale Housing\") +\n  my_theme_dark\n\n# low burden, with affordable housing - and also have high percentage eligible for affordable housing\nlowburden_ah_plot <- lowburden_ah %>% \n  st_union() %>% \n  ggplot() +\n  geom_sf() +\n  labs(title = \"Neighborhoods with Low Rent Burden, \\nWith Affordale Housing\",\n       subtitle = \"and also have high percentage eligible for affordable housing\") +\n  my_theme_dark\n\n# ow percentage of households that qualify for affordable housing\nlowburden_non_plot <- lowburden_non %>% \n  st_union() %>% \n  ggplot() +\n  geom_sf() +\n  labs(title = \"Neighborhoods with Low Rent Burden, \\nNo Affordale Housing\",\n       subtitle = \"low percentage of households that qualify for affordable housing\") +\n  my_theme_dark\n\ninterest_plot <- interest %>% \n  st_union() %>% \n  ggplot() +\n  geom_sf() +\n  labs(title = \"Neighborhood with low rent burden right next \\nto neighborhood with high rent burden and no support\",\n       subtitle = \"50% percentage of households that qualify for affordable housing, less than 20% rent burden\") +\n  my_theme_dark\n```\n:::\n\n\nI ended up looking at a cluster of census tracts that had high rent burden, high eligibility, and no affordable housing projects in it. This seemed like a location in which it would be really beneficial to build affordable housing. I wanted to highlight these neighborhoods, and present them as a possible location of interest.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# label Neighborhoods \nn_labels <- data.frame(long = c(33.968132, 33.99926595, 33.9924535, 33.9583695),\n                     lat = c(-118.154518, -118.152339, -118.195177, -118.1809385), \n                     label = c(\"Bell Gardens\", \"Commerce\", \"Maywood\", \"Cudahy\"))\n\nneighborhood_plot <- ggplot(data = burden_non %>% st_union()) +\n  geom_sf(fill = \"#AA592C\", color = \"white\", \n          lwd = 0.2) +\n  geom_point(data = n_labels, \n             aes(x = lat, y = long),\n             color = \"white\") +\n  geom_text(data = n_labels, \n            aes(x = lat, y = long, label = label),\n            vjust = -1, \n            color = \"white\", \n            family = \"alice\",\n            size = 9) +\n  guides(fill = \"none\") +\n  my_theme_dark\n\nneighborhood_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=576}\n:::\n:::\n\n\n### Plotting: Rent burden with affordable housing projects\n\nThis plot shows the distribution of rent burden across Los Angeles, and the location of affordable housing projects since 2003. The color of the filling reminds me of brick, and brought to mind a theme of buildings. I wanted to be color blind friendly so I chose blue dots for the affordable housing so that they could be clearly seen. The selection of these colors ended up being the entire theme for my infographic, and made the color selection in words and graphs all act as a very intentional legend throughout the entire plot.\n\nI also added an arrow to the plot that indicated the census tract of interest I highlighted above. I decided to do that because I want all my work to be an opportunity to find solutions and highlighting a place that is potentially being undeserved or ignored by the city of LA can provide the opportunity for intentional project development in the future.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_map <- ggplot(rent_burdened) +\n  geom_blank() +\n  geom_sf(aes(fill = percent_burden), color = \"black\", lwd = 0.05) +\n  scale_fill_stepsn(colors = rev(colors),\n                    breaks = scales::breaks_width(width = 5),\n                    labels = scales::label_percent(scale = 1)) +\n  guides(fill = guide_colorbar(barheight = unit(1, units = \"mm\"),\n                                 barwidth = unit(220, units = \"mm\"),\n                                 direction = \"horizontal\",\n                                 ticks.colour = \"grey20\",\n                                 title.position = \"top\",\n                                 label.position = \"bottom\",\n                                 title.hjust = 0.5)) +\n  geom_sf(data = ah_clean, aes(color = \"skyblue\"), alpha = 0.5, size = 1, color = \"skyblue\") +\n  labs(fill = \"Percent of Census Tract Burdened\") +\n  guides(color = \"Hello\") +\n  my_theme_dark\n\n# create the arrow \nburden_non_pt <- data.frame(\n  y = c(33.99),\n  x = c(-118.13795),\n  #     yend = c(33.93291),\n  # xend = c(-118.66136)\n  yend = c(33.877222),\n  xend = c(-117.92694)\n)\n\n# add arrow to the plot \nburden_plot <- base_map +\n    geom_curve(data = burden_non_pt,\n             aes(x = x, y = y, xend = xend, yend = yend),\n             arrow = arrow(length = unit(0.01, \"npc\"), type = \"open\"),\n             #linetype = \"dashed\",\n             curvature = -0.3,\n             size = 1.5,\n             color = \"#AA592C\")\n# print plot\nburden_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=1056}\n:::\n:::\n\n\n# Who?\n\nTo approach the element of *who* I used census tract information to identify the ethnicity of people in these census tracts. It's important to understand the people in these areas because we aren't just mapping code we are talking about real lives.\n\n## Accessing the demographics\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# | code-fold: true\n\n# load list of variables that I could access\nvariables <- load_variables(2022, \"acs1\", cache = TRUE)\n\nah_tracts <- unique(ah_clean$NAME)\n\n# B01001A is Sex by Age (White Alone)\n# B01001B is Sex by Age (Black or African American Alone)\n# B01001\n\n B01001 <- variables %>% \n  filter(str_detect(name, \"B01001\"))\n\n# has the demographic info\nla_tract_age <- get_acs(\n  state = \"CA\",\n  county = \"Los Angeles\",\n  geography = \"tract\",\n  variables = B01001$name,\n  geometry = TRUE,\n  year = 2022\n)\n\ntract_ethnicity <- la_tract_age %>%\n  mutate(NAME = gsub(\"; Los Angeles County; California\", # elements that you want to remove\n                                  \"\", # replace with blank\n                                  NAME)) %>%\n  mutate(NAME = gsub(\"Census Tract \", # elements that you want to remove\n                                  \"\", # replace with blank\n                                  NAME)) %>% \n  rename(census_tract = NAME)\n\n#unique(tract_ethnicity$census_tract)\n\n# make a list of the census tracts of interest \non_plot <- lowburden_ah %>% \n  mutate(area = \"lowburden_ah\") %>% \n  rbind(burden_ah %>% mutate(area = \"burden_ah\")) %>% \n  rbind(burden_non %>%  mutate(area = \"burden_non\")) %>% \n  rbind(lowburden_non %>% mutate(area = \"lowburden_non\")) %>% \n  select(census_tract, area)\n\n# filter the tracts in the age / race df \nsex_age_ethnicity <- tract_ethnicity %>% \n  \n  # replace the variables with more intuitive information \n  mutate(variable = gsub(\"B01001A\",\n                       \"white\",\n                       variable),\n         variable = gsub(\"B01001B\",\n                       \"black\",\n                       variable),\n         variable = gsub(\"B01001C\",\n                       \"ai\", # american indian and alaska native\n                       variable),\n         variable = gsub(\"B01001D\",\n                       \"asian\",\n                       variable),\n         variable = gsub(\"B01001E\",\n                       \"haw\", # hawaiian and pacific islander\n                       variable),\n         variable = gsub(\"B01001F\",\n                       \"other\",\n                       variable),\n         variable = gsub(\"B01001G\",\n                       \"two\", # two or more \n                       variable),\n                  variable = gsub(\"B01001H\",\n                       \"wn\", # white non hispanic and latino\n                       variable),\n         variable = gsub(\"B01001I\",\n                       \"hisp\", # hispanic and latino\n                       variable),\n         variable = gsub(\"B01001_\",\n                       \"total_\",\n                       variable)) %>% \n  separate_wider_delim(cols = 3,\n                       delim = \"_\",\n                       names = c(\"group\", \"age_variable\")) \n\n\n# -------------------- demographics of affordable housing tracts\nah_tracts_eth <- sex_age_ethnicity %>% \n  filter(census_tract %in% ah_tracts) %>% \n  filter(age_variable == \"001\") %>% \n  select(-c(GEOID, age_variable, moe, geometry)) %>% \n  mutate(status = \"affordable\")\n\nah_tot <- ah_tracts_eth %>% \n  filter(group == \"total\") %>% \n  select(census_tract, group, estimate) %>% \n  rename(totals = group,\n         total_est = estimate)\n\nah_tracts_eth <- ah_tracts_eth %>% \n  filter(group != \"total\") %>% \n  left_join(ah_tot, by = \"census_tract\") %>% \n  mutate(percent = round((estimate/total_est)*100, 1)) %>% \n  select(census_tract, group, estimate, percent, status) \n\n# -------------------- demographics of all tracts\nall_eth <- sex_age_ethnicity %>% \n  filter(census_tract %in% rent_burdened$census_tract) %>% \n  filter(age_variable == \"001\") %>% \n  select(-c(GEOID, age_variable, moe, geometry)) %>% \n  mutate(status = \"non\")\n\nall_tot <- all_eth %>% \n  filter(group == \"total\") %>% \n  select(census_tract, group, estimate) %>% \n  rename(totals = group,\n         total_est = estimate)\n\nall_eth <- all_eth %>% \n  filter(group != \"total\") %>% \n  left_join(all_tot, by = \"census_tract\") %>% \n  mutate(percent = round((estimate/total_est)*100, 1)) %>% \n  select(census_tract, group, estimate, percent, status) \n\n# -------------------- combine the tracts\ncompare <- all_eth %>% \n  rbind(ah_tracts_eth) %>% \n  rename(groups = group) %>% \n  filter(!groups %in% c(\"ai\", \"haw\", \"two\"))\n```\n:::\n\n\n## Creating Ridge Plots\n\nComparing the demographics of all of LA vs the census tracts with affordable housing in them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshowtext_auto()\n\ncustom_labels <- c(\"White (non Hispanic \\nor Latino)\", \"White\", \"Other\", \"Hispanic\", \"Black\", \"Asian\")\n\nsubtitle <- \"Compared to the demographic distribution of <span style = 'color: #DDB472; font-size: 16pt;'>census tracts in Los Angeles overall</span>, the <span style = 'color: skyblue; font-size: 16pt;'>census tracts that have affordable housing</span> projects built since 2003 have **greater** proportions of blank and hispanic individuals.\"\n\nc_means <- compare %>% \n  group_by(status, groups) %>% \n  summarize(means = mean(percent, na.rm = TRUE),\n            .groups = \"drop\")\n\nggplot(compare) +\n  geom_density_ridges(aes(x = percent, y = groups, fill = status, linetype = status), \n                      alpha = 0.7, \n                      quantile_lines=TRUE,\n                      quantile_fun = mean,\n                      scale = 0.9) +\n  scale_y_discrete(expand = c(0.01, 0.5),\n                   labels = rev(custom_labels)) +\n  xlim(0,100) +\n  scale_fill_manual(values = c(\"skyblue\", \"#DDB472\")) +\n  geom_text(data = c_means, aes(x = means, y = groups, label = round(means, 0), \n                                color = status),\n            family = \"alice\",\n            vjust = 1.5, \n            size = 6) +\n  scale_color_manual(values = c(\"skyblue\", \"#DDB472\")) +\n  labs(y = \"Percent of Census Tract\", \n       x = \"\",\n      caption = subtitle,\n       fill = \"\"\n       ) +\n  guides(fill = \"none\", linetype = \"none\", color = \"none\") +\n  theme(plot.subtitle = element_markdown(ggtext::element_textbox_simple(family = \"alice\", size = 10, color = \"white\"))) +\n  theme(plot.title = element_text(size = 20, face = \"bold\", family = \"playfairDisplay\", hjust = 0.5), # Font size set to 16 and bold.\n        plot.caption.position = \"plot\",\n        plot.caption =  ggtext::element_textbox_simple(size = 15, hjust = 0, family = \"alice\", color = \"white\"),\n        axis.title = element_text(size = 14), # Font size set to 12.\n        axis.text.y = element_text(size = 16, color = \"white\", family = \"alice\"),\n        axis.text.x = element_blank(),\n        #axis.ticks.x = element_line(size = 10, color = \"white\"),\n        legend.title = element_text(size = 15, face = \"bold\", family = \"alice\", color = \"white\"), # Font size of the title of the legend set to 12 and bold.\n        legend.text = element_text(size = 10, color = \"white\"), # font size of the text in the legend\n        plot.background = element_rect(fill = \"black\"),\n        panel.background = element_rect(fill = \"black\"),\n        legend.background = element_rect(fill = \"black\"),\n        plot.margin = margin(12, 6, 12, 18),\n        #axis.line.x = element_line(color = \"white\"),\n        panel.grid = element_blank(), # invisible auxiliary grids\n        #panel.grid.minor.x = element_line(color = \"white\"),\n        strip.background = element_rect(fill = \"black\", color = \"#ff975d\"), # strip background\n        strip.text = element_text(size = 12, face = \"bold\", family = \"alice\", color = \"white\"), # strip texts\n        legend.position = \"top\", # position of the legend\n        legend.box.background = element_rect(color = \"black\"), # background of the plot\n        legend.key.size = unit(1, \"cm\") # size of the legends key\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n# What?\n\nA key element for understanding *what* is how the city of LA is addressing this housing issue and the impact. I chose to focus on two executive orders in 2015 and 2022 that attempted to make building affordable housing easier. Its often useful to examine the amount of funding that the government is giving to a project to understand how much they care. That's why I chose to look at the total amount of money that LAHD used on affordable housing projects from 2003 to present.\n\n## Creating Bar Plot\n\n### Set up\n\nI wanted to highlight the two years so that the viewer could easily see the years I was focusing on. To do this, I highlighted 2015 and 2022 using `geom_col`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\norder_2015 <- data.frame(\n  y = c(210000000),\n  x = c(2012),\n  yend = c(50000000),\n  xend = c(2015)\n)\n\norder_2022 <- data.frame(\n  y = c(250000000),\n  x = c(2024),\n  yend = c(190000000),\n  xend = c(2022)\n)\n\n# looking at the total construction of affordable housing in each year \nah_clean_plot <- ah_clean %>% \n  drop_na() %>% \n  group_by(year) %>% \n  summarize(total_funding = sum(lahd_funded))\n```\n:::\n\n\n### Plotting: Bar Plot\n\nOnce we plotted this bar plot, we can see that after 2015, the amount of money going into affordable housing increased exponentially. As it began to decrease, for factors that we are not going into here, another mayor passed executive directive 1 that expedited the process of building 100% affordable housing projects. This order made the permitting and zoning processes much easier, and two years later there have been \"more than 16,150 affordable units\" ([Los Angeles Daily News](https://www.dailynews.com/2024/02/08/los-angeles-one-weird-trick-to-build-affordable-housing-at-no-public-cost/)) proposed. The hope is that this momentum continues.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nah_clean_plot %>%  \n  ggplot() +\n  geom_col(data = ah_clean_plot %>% \n             filter(year != \"2015\"),\n           aes(x = year, y = total_funding),\n           alpha = 0.7,\n           color = \"#DDB472\",\n         fill = \"black\") +\n  geom_col(data = ah_clean_plot %>% filter(year == 2015),\n           aes(x = year, y = total_funding),\n         color = \"#DDB472\",\n         fill = \"#DDB472\") +\n  geom_col(data = ah_clean_plot %>% filter(year == 2022),\n           aes(x = year, y = total_funding),\n         color = \"#DDB472\",\n         fill = \"#DDB472\") +\n  scale_y_continuous(expand=c(0,0),\n                     labels = function(x) paste0(x / 1e6, \"M\")) +\n  geom_curve(data = order_2015,\n               aes(x = x, y = y, xend = xend, yend = yend),\n              arrow = arrow(length = unit(0.01, \"npc\")),\n             size = 0.7,\n             curvature = -0.6,\n             color = \"white\") +\n    geom_curve(data = order_2022,\n               aes(x = x, y = y, xend = xend, yend = yend),\n              arrow = arrow(length = unit(0.01, \"npc\")),\n             size = 0.7,\n             curvature = 0.3,\n             color = \"white\") +\n  xlim(2000, 2035) +\n  annotate(geom = \"text\", x = 2009, y = 250000000, \n           label = \"Mayor Eric Garcetti passes \\nExecutive Directive 13, \\nSupport for Affordable Housing (ED 13)\",\n           color = \"white\",\n           family = \"alice\",\n           size = 6) +\n  annotate(geom = \"text\", x = 2028, y = 250000000, \n           label = \"Mayor Karen Bass passes \\nExecutive Directive 1, \\nExpedition of Permits (ED 1)\",\n           color = \"white\",\n           family = \"alice\",\n           size = 6) +\n  theme_classic() +\n  labs(x = 'Year',\n       y = 'Total Funding (in millions)'\n  ) +\n  theme(plot.title = element_text(size = 20, face = \"bold\", family = \"playfairDisplay\", hjust = 0.5), # Font size set to 16 and bold.\n        plot.caption.position = \"plot\",\n        plot.caption = element_text(size = 10, hjust = 0, family = \"alice\", color = \"white\"),\n        axis.title = element_text(size = 14), # Font size set to 12.\n        axis.text = element_text(size = 16, color = \"white\", family = \"alice\"),\n        #axis.ticks.x = element_line(size = 10, color = \"white\"),\n        legend.title = element_text(size = 15, face = \"bold\", family = \"alice\", color = \"white\"), # Font size of the title of the legend set to 12 and bold.\n        legend.text = element_text(size = 10, color = \"white\"), # font size of the text in the legend\n        plot.background = element_rect(fill = \"black\"),\n        panel.background = element_rect(fill = \"black\"),\n        legend.background = element_rect(fill = \"black\"),\n        plot.margin = margin(20, 6, 12, 20),\n        axis.line.x = element_line(color = \"white\"),\n        panel.grid.major.y = element_line(color = \"white\", size = 0.25), # invisible auxiliary grids\n        strip.background = element_rect(fill = \"black\", color = \"#ff975d\"), # strip background\n        strip.text = element_text(size = 12, face = \"bold\", family = \"alice\", color = \"white\"), # strip texts\n        legend.position = \"top\", # position of the legend\n        legend.box.background = element_rect(color = \"black\"), # background of the plot\n        legend.key.size = unit(1, \"cm\") # size of the legends key\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=1248}\n:::\n:::\n\n\n# Infographic \n\nPutting it all together, we get a picture of affordable housing in LA.\n\n![](images/infographic.png){fig-alt=\"An infographic describing the where, who, and what of the affordable housing crisis in LA. A chloropleth map that shows the distribution of rent burden in Los Angeles County, California. Points are used to show affordable housing projects that have been built between 2003 and 2014. The neighborhoods of Maywood, Commerce, Bell Gardens, and Cudahy have high rent burden, high eligibility for affordable housing, and have not had any projects built there. A density ridge plot shows the demographic distribution of the census tracts in LA compared to the tracts with affordable housing built in them. There is a greater proportion of Black and Hispanic people in tracts with affordable housing built in them compared to the average across LA. A bar plot showing the amount of funding from the LAHD that has gone into building affordable housing. Order in 2015 led to an exponential increase in funding for projects, and the order in 2022 helped expedite permits.\" fig-align=\"center\"}\n\n# The Approach\n\nThe infographic decisions I made were intended to follow the theme of the building I grew up in. The drawing of buildings inside the bar plot felt appropriate since it is looking at the amount of money for building new affordable housing developments.\n\nI made sure to highlight the important elements of each plot, and add context to the maps. Having the map allows people to see the location that all of this is taking place. My main goal was to highlight potential approaches to understanding how LA is approaching its affordable housing crisis, and a path to guide people to focusing on areas that need more help. Looking at multiple factors, in this case eligibility and burden, is only hinting at the complex dynamics that are involved in building equitable solutions in cities.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}